// Code generated by @salt/generator-ui5. DO NOT EDIT.
sap.ui.define([
    "sap/ui/core/mvc/Controller"
], (Controller) => Controller.extend("d2-empty-bins.empty-bins.salt.salt-controller", {
    onInit() {
        /**
         * add callFunction fucntion to oData Model with Promise
         */
        // eslint-disable-next-line no-proto
        Object.assign(this.getView().getModel().__proto__, {
            callFunctionAndWait(sPath, oUrlParameters) {
                return new Promise((resolve, reject) => {
                    this.callFunction(sPath, {
                        method: "GET",
                        oUrlParameters,
                        success(response) {
                            resolve(response);
                        },
                        error(error) {
                            reject(error);
                        }
                    });
                });
            }
        });
    },
    /**
     * Get the model to be used for data bindings with the given model name
     * @param {string|undefined} sModelName name of the model to be retrieved
     * @returns {sap.ui.model.Model} oModel
     */
    getModel(sModelName) {
        return this.getView().getModel(sModelName);
    },

    /**
     * Sets or unsets a model for the given model name for this ManagedObject.
     * @param {sap.ui.model.Model} oModel the model to be set or null or undefined
     * @param {string} sName the name of the model or undefined
     * @returns {sap.ui.base.ManagedObject} this to allow method chaining
     */
    setModel(oModel, sName) {
        return this.getView().setModel(oModel, sName);
    },

    /**
     * Displays a toast message with the given message
     * @param {string} message Message
     * @param {integer} duration Duration in milliseconds (default 3000)
     */
    showMessageToast(message, duration = 3000) {
        sap.m.MessageToast.show(message, {
            duration
        });
    },

    /**
     * Navigates to a specific route defining a set of parameters
     * @param {string} sName Name of the route
     * @param {object} oParameters Parameters for the route
     */
    display(sName, oParameters) {
        let oTargets = this.getTargets();
        oTargets.display(sName, oParameters);
    },

    /**
     * Returns the routing targets
     * @returns {sap.m.routing.Targets} Routing targets
     */
    getTargets() {
        let oRouter = this.getRouter();
        return oRouter.getTargets();
    },

    /**
     * Returns a target by its name
     * @param {string} sName the name of the single target
     * @returns {sap.ui.core.routing.Target|undefined|sap.ui.core.routing.Target[]} target or multiple targets
     */
    getTarget(sName) {
        let oRouter = this.getRouter();
        return oRouter.getTarget(sName);
    },

    /**
     * Returns the routing router
     * @returns {sap.m.routing.Router} Router
     */
    getRouter() {
        return this.getOwnerComponent().getRouter();
    },

    /**
     * Navigates to a specific route defining a set of parameters.
     * @param {string} sName Name of the route
     * @param {object} oParameters Parameters for the route
     * @returns {sap.m.routing.Router} Router for chaining.
     */
    navTo(sName, oParameters) {
        return this.getRouter().navTo(sName, oParameters);
    },

    /**
     * Attach event-handler fnFunction to the 'display' event of this sap.ui.core.routing.Targets.
     * @param {string} sTarget Routing target
     * @param {function} fnFunction Function which will be called
     */
    attachDisplay(sTarget, fnFunction) {
        let oTarget = this.getTarget(sTarget);
        oTarget.attachDisplay(fnFunction, this);
    },
    /**
     * Returns a locale-specific string value for the given key sKey.
     * @param {string} sKey Key to retrieve the text for
     * @param {string[]} aArgs List of parameter values which should replace the placeholders
     * @returns {string} Translated i18n text
     */
    getTranslation(sKey, aArgs) {
        // let oBundle = sap.ui.getCore().getModel("i18n").getResourceBundle();
        let oBundle = this.getOwnerComponent().getModel("i18n").getResourceBundle();
        return oBundle.getText(sKey, aArgs);
    },
    /**
     * Parses error
     * @param {object} error Request error
     * @returns {String} Returns error reason
     */
    parseError(error) {
        try {
            if (error.responseText.match(/([{}])/g)) {
                return JSON.parse(error.responseText).error.message.value;
            } else {
                return error.responseText;
            }
        } catch (err) { // returns generic error if error cant be parsed
            return error.message;
        }
    },

    /**
     * refreshes Model data
     * @param {boolean} [bForceUpdate=false] Force update of controls
     * @param {boolean} [bRemoveData=false] If set to true then the model data will be removed/cleared.
     * Please note that the data might not be there when calling e.g. getProperty too early before the refresh call returned.
     */
    refresh(bForceUpdate = false, bRemoveData = false) {
        this.getView().getModel().refresh(bForceUpdate, bRemoveData);
    },
    /**
     * Triggers Function call
     * @param {string}  sId ID of Calling element such as Buttons
     * @param {object}  oView Object of Current View
     * @param {string}  sPath Path of call function
     * @param {object}  oUrlParameters Object of Url parameters
     * @return {object} Server Response
     */
    formatter: {
        /**
         * Triggers Function call
         * @param {any}     number Number with missing Zeros
         * @param {number}  size Character length of Datatype
         * @return {String} Number with leading zeros
         */
        fillZeros: (number, size) => String(number).padStart(size, '0'),
        /**
         * Triggers Function call
         * @param {string}      number Number wirh unused decimals
         * @param {string}      unit optinal unit
         * @return {String}     Number without unused decimals
         */
        removUnusedZeros(number, unit) {
            number = number.replace(/(\.[0-9]*?)0+$/, "$1").replace(/\.$/, ""); // remove trailing zeros and remove trailing dot
            if (unit) {
                return `${number} ${unit}`; // If we got an Unit, append it to the Value
            } else {
                return number;
            }
        },
        isFilled: function (value) {
            if (value == 0) {
                return true;
            }
            return !!(value);
        }
    },

    /**
     * Logs a info message
     * @param {string} sMessage Log message
     */
    log(sMessage) {
        jQuery.sap.log.info(sMessage, "SALT Solutions AG");
    }
}));